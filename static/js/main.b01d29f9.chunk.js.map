{"version":3,"sources":["components/editor.js","components/preview.js","App.js","serviceWorker.js","index.js"],"names":["Editor","getInput","useState","change","setChange","className","id","style","backgroundColor","mode","theme","onChange","input","fontSize","value","Preview","output","marginLeft","dangerouslySetInnerHTML","__html","App","setOutput","markdown","md","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yUA2CeA,MAlCf,YAA6B,IAAZC,EAAW,EAAXA,SAAW,EAEEC,qBAFF,mBAEnBC,EAFmB,KAEXC,EAFW,KAS1B,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,YACb,iCACE,gDAEF,6BAASA,UAAU,oBACjB,wCACA,yBAAKA,UAAU,SAASC,GAAG,WAAWC,MAAO,CAACC,gBAAiB,WAC/D,yBAAKH,UAAU,SAASC,GAAG,WAAWC,MAAO,CAACC,gBAAiB,WAC/D,yBAAKH,UAAU,SAASC,GAAG,UAAUC,MAAO,CAACC,gBAAiB,WAC9D,yBAAKH,UAAU,SAASC,GAAG,iBAAiBC,MAAO,CAACC,gBAAiB,aAGzE,kBAAC,IAAD,CACEC,KAAK,WACLC,MAAM,WACNC,SAtBe,SAACC,GACpBR,EAAUQ,GACVX,EAASW,IAqBLC,SAAU,GACVC,MAAOX,MCvBAY,MAZf,YAA8B,IAAXC,EAAU,EAAVA,OAEjB,OACE,yBAAKX,UAAU,qBACb,yBAAKA,UAAU,iBACb,wBAAIE,MAAO,CAAEU,WAAY,QAAzB,iBACA,yBAAKC,wBAAyB,CAACC,OAAQH,Q,iBCchCI,MAhBf,WAAgB,IAAD,EAEelB,qBAFf,mBAENc,EAFM,KAEEK,EAFF,KAQb,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,CAAQJ,SANS,SAACqB,GACpBD,EAAUE,MAAKC,OAAOF,OAMpB,kBAAC,EAAD,CAASN,OAAQA,MCLHS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b01d29f9.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/theme-monokai\";\nimport \"ace-builds/src-noconflict/theme-twilight\";\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\nimport \"ace-builds/src-noconflict/theme-solarized_dark\";\n\n\nfunction Editor({getInput}) {\n\n  const [change, setChange] = useState();\n\n  const handleChange = (input) => {\n    setChange(input);\n    getInput(input);\n  }\n\n  return (\n    <div className='editor'>\n      <div className='settings'>\n        <section>\n          <h3>Markdown Editor</h3>\n        </section>\n        <section className='settings-options'>\n          <h5>Themes: </h5>\n          <div className='option' id='tomorrow' style={{backgroundColor: 'white'}}></div>\n          <div className='option' id='twilight' style={{backgroundColor: 'white'}}></div>\n          <div className='option' id='monokai' style={{backgroundColor: 'white'}}></div>\n          <div className='option' id='solarized_dark' style={{backgroundColor: 'white'}}></div>\n        </section>\n      </div>\n      <AceEditor\n        mode='markdown'\n        theme='twilight'\n        onChange={handleChange}\n        fontSize={14}\n        value={change}\n      />\n    </div>\n  )\n}\n\nexport default Editor\n","import React from 'react';\n\nfunction Preview({ output }) {\n\n  return (\n    <div className='preview-container'>\n      <div className='preview-panel'>\n        <h3 style={{ marginLeft: '8px' }}>Preview HTML:</h3>\n        <div dangerouslySetInnerHTML={{__html: output}}></div>\n      </div>\n    </div>\n  )\n}\n\nexport default Preview\n","import React, { useState } from 'react';\nimport './App.css';\nimport Editor from './components/editor';\nimport Preview from './components/preview';\nimport md from 'markdown-it';\n\nfunction App() {\n\n  const [output, setOutput] = useState();\n\n  const createMarkup = (markdown) => {\n    setOutput(md().render(markdown));\n  }\n\n  return (\n    <div className=\"App\">\n      <Editor getInput={createMarkup}/>\n      <Preview output={output}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}